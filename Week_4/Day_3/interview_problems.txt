# For both of these problems, assume there is a Node class. The node class will take in a value as part of its initialization. You will monkeypatching the following methods:
# 1. Write a method `bfs` that does a breadth-first search starting at a root node. It takes in a target, and a proc as an argument.
# 2. Write a method `dfs` that does a depth-first search starting at a root node. It takes in a target, and a proc as an argument.
# Example usage:
# n1 = Node.new(1) # making a node with a value of 1
# n1.bfs(1) #=> n1
# n1.dfs { |node| node.value == 1 } #=> n1 (found a node with value == 1)
class Node
  # -- Assume nodes have a value, and a attr_reader on value
  # -- Also, assume there are working parent/child-related methods for Node
  def bfs(&prc)
    raise if prc == nil
    queue = [self]
    until queue.empty?
      front = queue.shift
      return front if prc.call(front)
      queue += front.children
    end
    nil
  end
  # raise error message if prc is nil
  # have a queue
  # until queue is empty, we will remove the front of the queue, return that value and then add children of the front of the queue to the queue

  def dfs(&prc, visited)
    visited = []

    self.children.each do |child| 
        return child if prc.call(child)
        child.dfs(&prc, visited) if !visited.include?(child.value)
        visited << child.value  
    end

    return nil 
  end
end

#have a visited array where we note which nodes have already been visited  
#iterate over children, calling dfs on each child 
#return child if child value is equal to target
#eturn nil if node is not found 